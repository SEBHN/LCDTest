
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000420  00000494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000420  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001381  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ad5  00000000  00000000  00001965  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000078b  00000000  00000000  0000243a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  00002bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000544  00000000  00000000  00002d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007dc  00000000  00000000  00003288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003a64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
   4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  24:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  34:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  68:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  6c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  70:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  74:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>

0000007c <__trampolines_end>:
  7c:	4c 69       	ori	r20, 0x9C	; 156
  7e:	6e 65       	ori	r22, 0x5E	; 94
  80:	20 32       	cpi	r18, 0x20	; 32
  82:	20 6c       	ori	r18, 0xC0	; 192
  84:	6f 6e       	ori	r22, 0xEF	; 239
  86:	67 65       	ori	r22, 0x57	; 87
  88:	72 20       	and	r7, r2
  8a:	74 68       	ori	r23, 0x84	; 132
  8c:	61 6e       	ori	r22, 0xE1	; 225
  8e:	20 31       	cpi	r18, 0x10	; 16
  90:	34 20       	and	r3, r4
  92:	63 68       	ori	r22, 0x83	; 131
  94:	61 72       	andi	r22, 0x21	; 33
  96:	61 63       	ori	r22, 0x31	; 49
  98:	74 65       	ori	r23, 0x54	; 84
  9a:	72 73       	andi	r23, 0x32	; 50
	...

0000009d <__c.2082>:
  9d:	4c 69 6e 65 20 31 20 6c 6f 6e 67 65 72 20 74 68     Line 1 longer th
  ad:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
  bd:	0a 00                                               ..

000000bf <copyRightChar>:
  bf:	07 08 13 14 14 13 08 07 00 10 08 08 08 08 10 00     ................
	...

000000d0 <__ctors_end>:
  d0:	11 24       	eor	r1, r1
  d2:	1f be       	out	0x3f, r1	; 63
  d4:	cf ef       	ldi	r28, 0xFF	; 255
  d6:	d0 e1       	ldi	r29, 0x10	; 16
  d8:	de bf       	out	0x3e, r29	; 62
  da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
  dc:	11 e0       	ldi	r17, 0x01	; 1
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	e0 e2       	ldi	r30, 0x20	; 32
  e4:	f4 e0       	ldi	r31, 0x04	; 4
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
  e8:	05 90       	lpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	ae 32       	cpi	r26, 0x2E	; 46
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>
  f2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
  f6:	0c 94 0e 02 	jmp	0x41c	; 0x41c <_exit>

000000fa <__bad_interrupt>:
  fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <toggle_e>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
  fe:	16 9a       	sbi	0x02, 6	; 2
 100:	00 00       	nop
 102:	16 98       	cbi	0x02, 6	; 2
 104:	08 95       	ret

00000106 <lcd_write>:
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	d8 2f       	mov	r29, r24
 10c:	66 23       	and	r22, r22
 10e:	11 f0       	breq	.+4      	; 0x114 <lcd_write+0xe>
 110:	14 9a       	sbi	0x02, 4	; 2
 112:	01 c0       	rjmp	.+2      	; 0x116 <lcd_write+0x10>
 114:	14 98       	cbi	0x02, 4	; 2
 116:	15 98       	cbi	0x02, 5	; 2
 118:	81 b1       	in	r24, 0x01	; 1
 11a:	8f 60       	ori	r24, 0x0F	; 15
 11c:	81 b9       	out	0x01, r24	; 1
 11e:	c2 b1       	in	r28, 0x02	; 2
 120:	c0 7f       	andi	r28, 0xF0	; 240
 122:	8d 2f       	mov	r24, r29
 124:	82 95       	swap	r24
 126:	8f 70       	andi	r24, 0x0F	; 15
 128:	8c 2b       	or	r24, r28
 12a:	82 b9       	out	0x02, r24	; 2
 12c:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 130:	df 70       	andi	r29, 0x0F	; 15
 132:	dc 2b       	or	r29, r28
 134:	d2 b9       	out	0x02, r29	; 2
 136:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 13a:	cf 60       	ori	r28, 0x0F	; 15
 13c:	c2 b9       	out	0x02, r28	; 2
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <lcd_read>:
 144:	88 23       	and	r24, r24
 146:	11 f0       	breq	.+4      	; 0x14c <lcd_read+0x8>
 148:	14 9a       	sbi	0x02, 4	; 2
 14a:	01 c0       	rjmp	.+2      	; 0x14e <lcd_read+0xa>
 14c:	14 98       	cbi	0x02, 4	; 2
 14e:	15 9a       	sbi	0x02, 5	; 2
 150:	81 b1       	in	r24, 0x01	; 1
 152:	80 7f       	andi	r24, 0xF0	; 240
 154:	81 b9       	out	0x01, r24	; 1
 156:	16 9a       	sbi	0x02, 6	; 2
 158:	00 00       	nop
 15a:	90 b1       	in	r25, 0x00	; 0
 15c:	16 98       	cbi	0x02, 6	; 2
 15e:	00 00       	nop
 160:	16 9a       	sbi	0x02, 6	; 2
 162:	00 00       	nop
 164:	20 b1       	in	r18, 0x00	; 0
 166:	2f 70       	andi	r18, 0x0F	; 15
 168:	89 2f       	mov	r24, r25
 16a:	82 95       	swap	r24
 16c:	80 7f       	andi	r24, 0xF0	; 240
 16e:	16 98       	cbi	0x02, 6	; 2
 170:	82 2b       	or	r24, r18
 172:	08 95       	ret

00000174 <lcd_waitbusy>:
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_read>
 17a:	88 23       	and	r24, r24
 17c:	dc f3       	brlt	.-10     	; 0x174 <lcd_waitbusy>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_waitbusy+0xc>
 180:	00 c0       	rjmp	.+0      	; 0x182 <lcd_waitbusy+0xe>
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_read>
 188:	08 95       	ret

0000018a <lcd_command>:
 18a:	cf 93       	push	r28
 18c:	c8 2f       	mov	r28, r24
 18e:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_waitbusy>
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	8c 2f       	mov	r24, r28
 196:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <lcd_data>:
 19e:	cf 93       	push	r28
 1a0:	c8 2f       	mov	r28, r24
 1a2:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_waitbusy>
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	8c 2f       	mov	r24, r28
 1aa:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <lcd_gotoxy>:
 1b2:	61 11       	cpse	r22, r1
 1b4:	04 c0       	rjmp	.+8      	; 0x1be <lcd_gotoxy+0xc>
 1b6:	80 58       	subi	r24, 0x80	; 128
 1b8:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
 1bc:	08 95       	ret
 1be:	80 54       	subi	r24, 0x40	; 64
 1c0:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
 1c4:	08 95       	ret

000001c6 <lcd_clrscr>:
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
 1cc:	08 95       	ret

000001ce <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 1ce:	cf 93       	push	r28
 1d0:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 1d2:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_waitbusy>
    if (c=='\n')
 1d6:	ca 30       	cpi	r28, 0x0A	; 10
 1d8:	49 f4       	brne	.+18     	; 0x1ec <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 1da:	80 34       	cpi	r24, 0x40	; 64
 1dc:	10 f0       	brcs	.+4      	; 0x1e2 <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <lcd_putc+0x16>
#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
 1e2:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 1e4:	80 58       	subi	r24, 0x80	; 128
 1e6:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	8c 2f       	mov	r24, r28
 1f0:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
    }

}/* lcd_putc */
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 1fc:	ec 01       	movw	r28, r24
 1fe:	21 96       	adiw	r28, 0x01	; 1
 200:	fc 01       	movw	r30, r24
 202:	80 81       	ld	r24, Z
 204:	88 23       	and	r24, r24
 206:	29 f0       	breq	.+10     	; 0x212 <lcd_puts+0x1a>
        lcd_putc(c);
 208:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 20c:	89 91       	ld	r24, Y+
 20e:	81 11       	cpse	r24, r1
 210:	fb cf       	rjmp	.-10     	; 0x208 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 21c:	ec 01       	movw	r28, r24
 21e:	21 96       	adiw	r28, 0x01	; 1
 220:	fc 01       	movw	r30, r24
 222:	84 91       	lpm	r24, Z
 224:	88 23       	and	r24, r24
 226:	39 f0       	breq	.+14     	; 0x236 <lcd_puts_p+0x1e>
        lcd_putc(c);
 228:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 22c:	fe 01       	movw	r30, r28
 22e:	84 91       	lpm	r24, Z
 230:	21 96       	adiw	r28, 0x01	; 1
 232:	81 11       	cpse	r24, r1
 234:	f9 cf       	rjmp	.-14     	; 0x228 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 23c:	cf 93       	push	r28
 23e:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 240:	81 b1       	in	r24, 0x01	; 1
 242:	8f 67       	ori	r24, 0x7F	; 127
 244:	81 b9       	out	0x01, r24	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	8f e9       	ldi	r24, 0x9F	; 159
 248:	9f e0       	ldi	r25, 0x0F	; 15
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0xe>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x14>
 250:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 252:	11 9a       	sbi	0x02, 1	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 254:	10 9a       	sbi	0x02, 0	; 2
    lcd_e_toggle();
 256:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 25a:	81 ee       	ldi	r24, 0xE1	; 225
 25c:	94 e0       	ldi	r25, 0x04	; 4
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <lcd_init+0x22>
 262:	00 c0       	rjmp	.+0      	; 0x264 <lcd_init+0x28>
 264:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 266:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 26a:	95 e1       	ldi	r25, 0x15	; 21
 26c:	9a 95       	dec	r25
 26e:	f1 f7       	brne	.-4      	; 0x26c <lcd_init+0x30>
 270:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 272:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 276:	85 e1       	ldi	r24, 0x15	; 21
 278:	8a 95       	dec	r24
 27a:	f1 f7       	brne	.-4      	; 0x278 <lcd_init+0x3c>
 27c:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 27e:	10 98       	cbi	0x02, 0	; 2
    lcd_e_toggle();
 280:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 284:	95 e1       	ldi	r25, 0x15	; 21
 286:	9a 95       	dec	r25
 288:	f1 f7       	brne	.-4      	; 0x286 <lcd_init+0x4a>
 28a:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 28c:	88 e2       	ldi	r24, 0x28	; 40
 28e:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 292:	88 e0       	ldi	r24, 0x08	; 8
 294:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 298:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 29c:	86 e0       	ldi	r24, 0x06	; 6
 29e:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2a2:	8c 2f       	mov	r24, r28
 2a4:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>

}/* lcd_init */
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <wait_until_key_pressed>:
void wait_until_key_pressed(void)
{
    unsigned char temp1, temp2;
    
    do {
        temp1 = PIND;                  // read input
 2ac:	99 b1       	in	r25, 0x09	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ae:	e1 ee       	ldi	r30, 0xE1	; 225
 2b0:	f4 e0       	ldi	r31, 0x04	; 4
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <wait_until_key_pressed+0x6>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <wait_until_key_pressed+0xc>
 2b8:	00 00       	nop
        _delay_ms(5);                  // delay for key debounce
        temp2 = PIND;                  // read input
 2ba:	89 b1       	in	r24, 0x09	; 9
        temp1 = (temp1 & temp2);       // debounce input
    } while ( temp1 & _BV(PIND2) );	   // BV = Bit to Byte (1 << (bit))
 2bc:	89 23       	and	r24, r25
 2be:	82 fd       	sbrc	r24, 2
 2c0:	f5 cf       	rjmp	.-22     	; 0x2ac <wait_until_key_pressed>
    
    loop_until_bit_is_set(PIND,PIND2);            /* wait until key is released */
 2c2:	4a 9b       	sbis	0x09, 2	; 9
 2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <wait_until_key_pressed+0x16>
}
 2c6:	08 95       	ret

000002c8 <main>:


int main(void)
{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	27 97       	sbiw	r28, 0x07	; 7
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
    char buffer[7];
    int  num=134;
    unsigned char i;
    
    
    DDRD &=~ (1 << PD2);        /* Pin PD2 input              */
 2dc:	52 98       	cbi	0x0a, 2	; 10
    PORTD |= (1 << PD2);        /* Pin PD2 pull-up enabled    */
 2de:	5a 9a       	sbi	0x0b, 2	; 11


    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 2e0:	8c e0       	ldi	r24, 0x0C	; 12
 2e2:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_init>
 2e6:	0f 2e       	mov	r0, r31
 2e8:	ff ec       	ldi	r31, 0xCF	; 207
 2ea:	ef 2e       	mov	r14, r31
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	ff 2e       	mov	r15, r31
 2f0:	f0 2d       	mov	r31, r0
        /* 
         * Test 1:  write text to display
         */

        /* clear display and home cursor */
        lcd_clrscr();
 2f2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_clrscr>

		/* move cursor to position 6 on line 1 */
		lcd_gotoxy(0,0);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
        
        /* put string to display (line 1) with linefeed */
        lcd_puts("Hi Lukas, Phil\n");
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_puts>

		/* move cursor to position 6 on line 1 */
		lcd_gotoxy(2,1);
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>

        /* cursor is now on second line, write second line */
        lcd_puts("Cuong, Long");
 30e:	80 e1       	ldi	r24, 0x10	; 16
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 316:	0e 94 56 01 	call	0x2ac	; 0x2ac <wait_until_key_pressed>
        /*
         * Test 2: use lcd_command() to turn on cursor
         */
        
        /* turn on cursor */
        lcd_command(LCD_DISP_ON_CURSOR);
 31a:	8e e0       	ldi	r24, 0x0E	; 14
 31c:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>

        /* put string */
        lcd_puts( "CurOn");
 320:	8c e1       	ldi	r24, 0x1C	; 28
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 328:	0e 94 56 01 	call	0x2ac	; 0x2ac <wait_until_key_pressed>

        /*
         * Test 3: display shift
         */
        
        lcd_clrscr();     /* clear display home cursor */
 32c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_clrscr>

        /* put string from program memory to display */
        lcd_puts_P( "Line 1 longer than 14 characters\n" );
 330:	8d e9       	ldi	r24, 0x9D	; 157
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts_p>
        lcd_puts_P( "Line 2 longer than 14 characters" );
 338:	8c e7       	ldi	r24, 0x7C	; 124
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts_p>
        
        /* move BOTH lines one position to the left */
        lcd_command(LCD_MOVE_DISP_LEFT);
 340:	88 e1       	ldi	r24, 0x18	; 24
 342:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 346:	0e 94 56 01 	call	0x2ac	; 0x2ac <wait_until_key_pressed>

        /* turn off cursor */
        lcd_command(LCD_DISP_ON);
 34a:	8c e0       	ldi	r24, 0x0C	; 12
 34c:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
        
        /*
         *   Test: Display integer values
         */
        
        lcd_clrscr();   /* clear display home cursor */
 350:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_clrscr>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 354:	4a e0       	ldi	r20, 0x0A	; 10
 356:	be 01       	movw	r22, r28
 358:	6f 5f       	subi	r22, 0xFF	; 255
 35a:	7f 4f       	sbci	r23, 0xFF	; 255
 35c:	86 e8       	ldi	r24, 0x86	; 134
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__itoa_ncheck>
        
        /* convert interger into string */
        itoa( num , buffer, 10);
        
        /* put converted string to display */
        lcd_puts(buffer);
 364:	ce 01       	movw	r24, r28
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 36c:	0e 94 56 01 	call	0x2ac	; 0x2ac <wait_until_key_pressed>
        
        /*
         *  Test: Display userdefined characters
         */

       lcd_clrscr();   /* clear display home cursor */
 370:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_clrscr>
       
       lcd_puts("Copyright: ");
 374:	82 e2       	ldi	r24, 0x22	; 34
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_puts>
       
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
 37c:	80 e4       	ldi	r24, 0x40	; 64
 37e:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
 382:	0f eb       	ldi	r16, 0xBF	; 191
 384:	10 e0       	ldi	r17, 0x00	; 0
       for(i=0; i<16; i++)
       {
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
 386:	f8 01       	movw	r30, r16
 388:	84 91       	lpm	r24, Z
 38a:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_data>
 38e:	0f 5f       	subi	r16, 0xFF	; 255
 390:	1f 4f       	sbci	r17, 0xFF	; 255
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
       for(i=0; i<16; i++)
 392:	0e 15       	cp	r16, r14
 394:	1f 05       	cpc	r17, r15
 396:	b9 f7       	brne	.-18     	; 0x386 <main+0xbe>
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
       }
       
       /* move cursor to position 0 on line 2 */
       /* Note: this switched back to DD RAM adresses */
       lcd_gotoxy(0,1);
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
       
       /* display user defined (c), built using two user defined chars */
       lcd_putc(0);
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_putc>
       lcd_putc(1);
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_putc>
       

       /* wait until push button PD2 (INT0) is pressed */
       wait_until_key_pressed();
 3ac:	0e 94 56 01 	call	0x2ac	; 0x2ac <wait_until_key_pressed>
              
    }
 3b0:	a0 cf       	rjmp	.-192    	; 0x2f2 <main+0x2a>

000003b2 <__itoa_ncheck>:
 3b2:	bb 27       	eor	r27, r27
 3b4:	4a 30       	cpi	r20, 0x0A	; 10
 3b6:	31 f4       	brne	.+12     	; 0x3c4 <__itoa_ncheck+0x12>
 3b8:	99 23       	and	r25, r25
 3ba:	22 f4       	brpl	.+8      	; 0x3c4 <__itoa_ncheck+0x12>
 3bc:	bd e2       	ldi	r27, 0x2D	; 45
 3be:	90 95       	com	r25
 3c0:	81 95       	neg	r24
 3c2:	9f 4f       	sbci	r25, 0xFF	; 255
 3c4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__utoa_common>

000003c8 <__utoa_ncheck>:
 3c8:	bb 27       	eor	r27, r27

000003ca <__utoa_common>:
 3ca:	fb 01       	movw	r30, r22
 3cc:	55 27       	eor	r21, r21
 3ce:	aa 27       	eor	r26, r26
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	aa 1f       	adc	r26, r26
 3d6:	a4 17       	cp	r26, r20
 3d8:	10 f0       	brcs	.+4      	; 0x3de <__utoa_common+0x14>
 3da:	a4 1b       	sub	r26, r20
 3dc:	83 95       	inc	r24
 3de:	50 51       	subi	r21, 0x10	; 16
 3e0:	b9 f7       	brne	.-18     	; 0x3d0 <__utoa_common+0x6>
 3e2:	a0 5d       	subi	r26, 0xD0	; 208
 3e4:	aa 33       	cpi	r26, 0x3A	; 58
 3e6:	08 f0       	brcs	.+2      	; 0x3ea <__utoa_common+0x20>
 3e8:	a9 5d       	subi	r26, 0xD9	; 217
 3ea:	a1 93       	st	Z+, r26
 3ec:	00 97       	sbiw	r24, 0x00	; 0
 3ee:	79 f7       	brne	.-34     	; 0x3ce <__utoa_common+0x4>
 3f0:	b1 11       	cpse	r27, r1
 3f2:	b1 93       	st	Z+, r27
 3f4:	11 92       	st	Z+, r1
 3f6:	cb 01       	movw	r24, r22
 3f8:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <strrev>

000003fc <strrev>:
 3fc:	dc 01       	movw	r26, r24
 3fe:	fc 01       	movw	r30, r24
 400:	67 2f       	mov	r22, r23
 402:	71 91       	ld	r23, Z+
 404:	77 23       	and	r23, r23
 406:	e1 f7       	brne	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	32 97       	sbiw	r30, 0x02	; 2
 40a:	04 c0       	rjmp	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40c:	7c 91       	ld	r23, X
 40e:	6d 93       	st	X+, r22
 410:	70 83       	st	Z, r23
 412:	62 91       	ld	r22, -Z
 414:	ae 17       	cp	r26, r30
 416:	bf 07       	cpc	r27, r31
 418:	c8 f3       	brcs	.-14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 41a:	08 95       	ret

0000041c <_exit>:
 41c:	f8 94       	cli

0000041e <__stop_program>:
 41e:	ff cf       	rjmp	.-2      	; 0x41e <__stop_program>
